{
	"info": {
		"_postman_id": "89ca0fcb-cf90-4f23-be4d-002efe6b6a81",
		"name": "Competition Platform API Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38937280"
	},
	"item": [
		{
			"name": "User Views",
			"item": [
				{
					"name": "Create Moderator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.expect(pm.response.to.have.status(201));",
									"});",
									"",
									"",
									"pm.test(\"Response Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id and message\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData).to.have.property('id');",
									"  pm.expect(responseData).to.have.property('message');",
									"});",
									"",
									"",
									"pm.test(\"Id is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.id).to.be.a('number');",
									"    pm.expect(responseData.id).to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"moderator1\",\r\n    \"password\": \"securepass123\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/moderators",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"moderators"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Student",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.expect(pm.response.to.have.status(201));",
									"});",
									"",
									"",
									"pm.test(\"Response has the required Content-Type header\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Message field is present in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.message).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Message is in a valid format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"student1\",\r\n  \"password\": \"password123\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/students",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"students"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Students",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"",
									"pm.test(\"Validate the response array structure\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item).to.be.an('object');",
									"        pm.expect(item.comp_count).to.exist.and.to.be.a('number');",
									"        pm.expect(item.curr_rank).to.exist.and.to.be.a('number');",
									"        pm.expect(item.id).to.exist.and.to.be.a('number');",
									"        pm.expect(item.rating_score).to.exist.and.to.be.a('number');",
									"        pm.expect(item.username).to.exist.and.to.be.a('string');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Each object in the array has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    ",
									"    responseData.forEach(function(student) {",
									"        pm.expect(student).to.have.property('comp_count');",
									"        pm.expect(student).to.have.property('curr_rank');",
									"        pm.expect(student).to.have.property('id');",
									"        pm.expect(student).to.have.property('rating_score');",
									"        pm.expect(student).to.have.property('username');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Id and curr_rank are non-negative integers\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"",
									"    responseData.forEach(function(student) {",
									"        pm.expect(student.id).to.be.a('number').and.to.be.at.least(0);",
									"        pm.expect(student.curr_rank).to.be.a('number').and.to.be.at.least(0);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Username is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  responseData.forEach(function(student) {",
									"    pm.expect(student.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");",
									"  });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/students",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"students"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Rankings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - placement, rating_score, and student\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"",
									"    responseData.forEach(function(item){",
									"        pm.expect(item).to.have.property('placement');",
									"        pm.expect(item).to.have.property('rating_score');",
									"        pm.expect(item).to.have.property('student');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Placement is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item.placement).to.be.a('number').and.to.be.at.least(0);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Rating_score is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  responseData.forEach(function(item) {",
									"    pm.expect(item.rating_score).to.be.a('number').and.to.satisfy(score => score >= 0, \"Rating score must be a non-negative integer\");",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Student is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  responseData.forEach(function(item){",
									"    pm.expect(item.student).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"  });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/rankings",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"rankings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Student Notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(notification) {",
									"        pm.expect(notification).to.have.property('message');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  responseData.forEach(function(item) {",
									"    pm.expect(item.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response is an array with at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/students/1/notifications",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"students",
								"1",
								"notifications"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Auth Views",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 200', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"})",
									"",
									"pm.test('Response has the required fields - id, message, and user_type', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('message');",
									"    pm.expect(responseData).to.have.property('user_type');",
									"})",
									"",
									"pm.test('Id is a non-negative integer', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.id).to.be.a('number');",
									"    pm.expect(responseData.id).to.be.at.least(0);",
									"})",
									"",
									"pm.test('Message is a non-empty string', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"moderator1\",\r\n    \"password\": \"securepass123\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required Content-Type header with value application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Message field is present in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('message');",
									"});",
									"",
									"",
									"pm.test(\"Message field is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/api/logout",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 409\", function () {",
									"    pm.expect(pm.response.code).to.equal(409);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.error).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Error message is included in the response\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.error).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Error message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error message should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"student1\",\r\n  \"password\": \"password123\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Rankings update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 200', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"})",
									"",
									"pm.test('Response has the required Content-Type header with value application/json', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"})",
									"",
									"pm.test('Message field is present in the response', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.message).to.exist;",
									"})",
									"",
									"pm.test('Message is a non-empty string', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Message should not be empty');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/api/rankings/update",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"rankings",
								"update"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Competition Views",
			"item": [
				{
					"name": "Get Competitions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test('Response Content-Type is application/json', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"})",
									"",
									"pm.test('Validate the competition object', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function (competition) {",
									"        pm.expect(competition).to.be.an('object');",
									"        pm.expect(competition).to.have.property('date');",
									"        pm.expect(competition).to.have.property('id');",
									"        pm.expect(competition).to.have.property('level');",
									"        pm.expect(competition).to.have.property('location');",
									"        pm.expect(competition).to.have.property('max_score');",
									"        pm.expect(competition).to.have.property('moderators');",
									"        pm.expect(competition).to.have.property('name');",
									"        pm.expect(competition).to.have.property('teams');",
									"    });",
									"})",
									"",
									"pm.test('Moderators and teams arrays are present and have expected number of elements', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function (competition) {",
									"        pm.expect(competition.moderators).to.be.an('array').and.to.have.lengthOf.at.least(1);",
									"        pm.expect(competition.teams).to.be.an('array').and.to.have.lengthOf.at.least(1);",
									"    });",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/competitions",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"competitions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Competition",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"CodeFest\",\r\n  \"date\": \"2024-09-01\",\r\n  \"location\": \"Main Hall\",\r\n  \"level\": 2,\r\n  \"max_score\": 100\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/competitions",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"competitions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Competition Details With ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test('Response has the required fields', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.include.all.keys('Date', 'ID', 'Level', 'Location', 'Max Score', 'Moderators', 'Name', 'Teams');",
									"})",
									"",
									"pm.test('Max Score is a non-negative integer', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData['Max Score']).to.be.a('number').and.to.satisfy(val => val >= 0, 'Max Score should be a non-negative integer');",
									"})",
									"",
									"pm.test('Moderators and Teams arrays are present and not empty', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.Moderators).to.be.an('array').and.to.have.lengthOf.at.least(1, 'Moderators array should not be empty');",
									"    pm.expect(responseData.Teams).to.be.an('array').and.to.have.lengthOf.at.least(1, 'Teams array should not be empty');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/competitions/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"competitions",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Competition Results",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 401\", function () {",
									"  pm.expect(pm.response.code).to.equal(401);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Error message is present in the response\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.error).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Error message is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error message should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Error message is descriptive and user-friendly\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.error).to.exist.and.to.be.a('string', \"Error message should be a string\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"team_name\": \"TeamAlpha\",\r\n  \"student1\": \"james\",\r\n  \"student2\": \"mary\",\r\n  \"student3\": \"john\",\r\n  \"score\": 80\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/add_results_postman/CodeFest",
							"host": [
								"{{host}}"
							],
							"path": [
								"add_results_postman",
								"CodeFest"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Index Views",
			"item": [
				{
					"name": "Get Profile",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Initialize Database",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 200', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"})",
									"",
									"pm.test('Response has the required Content-Type header with value application/json', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"})",
									"",
									"pm.test('Message is a non-empty string', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Message should not be empty');",
									"})",
									"",
									"pm.test('Message in the response is as expected', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/api/init",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"init"
							]
						}
					},
					"response": []
				},
				{
					"name": "Student Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 200', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"})",
									"",
									"pm.test('Response has the required fields', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.profile).to.have.property('ID');",
									"    pm.expect(responseData.profile).to.have.property('Number of Competitions');",
									"    pm.expect(responseData.profile).to.have.property('Rank');",
									"    pm.expect(responseData.profile).to.have.property('Rating Score');",
									"    pm.expect(responseData.profile).to.have.property('Username');",
									"})",
									"",
									"pm.test('Verify profile properties', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.profile.ID).to.be.a('number').and.to.be.at.least(0);",
									"    pm.expect(responseData.profile['Number of Competitions']).to.be.a('number').and.to.be.at.least(0);",
									"    pm.expect(responseData.profile.Rank).to.be.a('number').and.to.be.at.least(0);",
									"    pm.expect(responseData.profile['Rating Score']).to.be.a('number').and.to.be.at.least(0);",
									"})",
									"",
									"pm.test('Username is a non-empty string', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.profile.Username).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Username should not be empty');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/student/1/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"student",
								"1",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Moderator Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id and username\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('username');",
									"});",
									"",
									"",
									"pm.test(\"Id is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.be.a('number').and.to.satisfy((id) => id >= 0, \"Id should be a non-negative integer\");",
									"});",
									"",
									"",
									"pm.test(\"Username is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/moderator/1/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"moderator",
								"1",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Leaderboard",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response has the required fields - placement, rating_score, and student\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item).to.have.property('placement');",
									"        pm.expect(item).to.have.property('rating_score');",
									"        pm.expect(item).to.have.property('student');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Placement is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    responseData.forEach((data) => {",
									"        pm.expect(data.placement).to.be.a('number').and.to.be.at.least(0);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Rating_score is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item.rating_score).to.be.a('number').and.to.satisfy((val) => val >= 0, \"Rating_score should be a non-negative integer\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Student is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  responseData.forEach(function(entry) {",
									"    pm.expect(entry.student).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/leaderboard",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"leaderboard"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Notification Views",
			"item": [
				{
					"name": "Create a Notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 201', function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"})",
									"",
									"pm.test('Id is a non-negative integer', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.notification.id).to.be.a('number').and.to.be.at.least(0);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"student_id\": 1,\r\n    \"message\": \"This is a test notification.\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/notifications",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Rank Update Notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required Content-Type header\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Message field should be a string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.message).to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Message field should not be null\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.message).to.not.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"student_id\": 1,\r\n    \"old_rank\": 2,\r\n    \"new_rank\": 1\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/notifications/rank-update",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"notifications",
								"rank-update"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}